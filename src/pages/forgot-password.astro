---
import Layout from '../layouts/Layout.astro';
---

<Layout title="Mot de passe oubli√©">
    <main class="main-container">
        <div class="reset-container">
            <h1>üîê Mot de passe oubli√©</h1>
            
            <div class="reset-form-container">
                <form id="reset-form" class="reset-form">
                    <div class="form-group">
                        <label for="email">Adresse email :</label>
                        <input 
                            type="email" 
                            id="email" 
                            name="email" 
                            required 
                            placeholder="votre@email.com"
                        >
                    </div>

                    <button type="submit" class="btn btn-primary">
                        Envoyer le lien de r√©initialisation
                    </button>
                </form>

                <div id="message" class="message" style="display: none;"></div>

                <div class="links">
                    <a href="/login">‚Üê Retour √† la connexion</a>
                    <a href="/register">Cr√©er un compte</a>
                </div>
            </div>
        </div>
    </main>
</Layout>

<script>
    async function handleResetPassword(event: Event) {
        event.preventDefault();
        
        const form = event.target as HTMLFormElement;
        const formData = new FormData(form);
        const email = formData.get('email') as string;
        
        const messageEl = document.getElementById('message');
        if (!messageEl) return;

        // Afficher un message de chargement
        messageEl.style.display = 'block';
        messageEl.className = 'message loading';
        messageEl.textContent = 'Envoi en cours...';

        try {
            const response = await fetch('/api/reset-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ email }),
            });

            const data = await response.json();

            if (data.success) {
                messageEl.className = 'message success';
                messageEl.textContent = data.message || 'Un email de r√©initialisation a √©t√© envoy√©.';
                form.reset();
            } else {
                messageEl.className = 'message error';
                messageEl.textContent = data.error || 'Erreur lors de la demande de r√©initialisation.';
            }
        } catch (error) {
            console.error('Erreur:', error);
            messageEl.className = 'message error';
            messageEl.textContent = 'Erreur de connexion. Veuillez r√©essayer.';
        }
    }

    document.addEventListener('DOMContentLoaded', () => {
        const form = document.getElementById('reset-form');
        if (form) {
            form.addEventListener('submit', handleResetPassword);
        }
    });
</script>

<style>
    .main-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
    }

    .reset-container {
        background: white;
        border-radius: 10px;
        padding: 2rem;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 400px;
    }

    h1 {
        text-align: center;
        color: #333;
        margin-bottom: 2rem;
        font-size: 1.8rem;
    }

    .reset-form-container {
        width: 100%;
    }

    .reset-form {
        display: flex;
        flex-direction: column;
        gap: 1.5rem;
    }

    .form-group {
        display: flex;
        flex-direction: column;
    }

    .form-group label {
        margin-bottom: 0.5rem;
        color: #555;
        font-weight: 500;
    }

    .form-group input {
        padding: 0.75rem;
        border: 2px solid #ddd;
        border-radius: 5px;
        font-size: 1rem;
        transition: border-color 0.3s;
    }

    .form-group input:focus {
        outline: none;
        border-color: #667eea;
        box-shadow: 0 0 0 3px rgba(102, 126, 234, 0.1);
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.3s;
        text-decoration: none;
        display: inline-block;
        text-align: center;
    }

    .btn-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
    }

    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
    }

    .message {
        margin-top: 1rem;
        padding: 0.75rem;
        border-radius: 5px;
        text-align: center;
        font-weight: 500;
    }

    .message.success {
        background: #d4edda;
        color: #155724;
        border: 1px solid #c3e6cb;
    }

    .message.error {
        background: #f8d7da;
        color: #721c24;
        border: 1px solid #f5c6cb;
    }

    .message.loading {
        background: #d1ecf1;
        color: #0c5460;
        border: 1px solid #bee5eb;
    }

    .links {
        margin-top: 2rem;
        text-align: center;
    }

    .links a {
        color: #667eea;
        text-decoration: none;
        font-size: 0.9rem;
        margin: 0 0.5rem;
        transition: color 0.3s;
    }

    .links a:hover {
        color: #764ba2;
        text-decoration: underline;
    }

    @media (max-width: 480px) {
        .main-container {
            padding: 1rem;
        }
        
        .reset-container {
            padding: 1.5rem;
        }
        
        h1 {
            font-size: 1.5rem;
        }
    }
</style>
