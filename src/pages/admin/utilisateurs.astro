---
import Layout from '../../layouts/Layout.astro';

// Vérifier l'authentification dans le middleware
// La page est déjà protégée par le middleware pour les admins
---

<Layout title="Gestion des Utilisateurs - Admin">
    <div class="admin-container">
        <div class="admin-header">
            <h1>👥 Gestion des Utilisateurs</h1>
            <div class="admin-nav">
                <a href="/admin" class="nav-btn">← Retour Dashboard</a>
                <button id="refresh-btn" class="btn-primary">🔄 Actualiser</button>
                <button id="create-user-btn" class="btn-success">➕ Créer Utilisateur</button>
            </div>
        </div>

        <!-- Stats rapides -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">👨‍💼</div>
                <div class="stat-info">
                    <h3 id="total-users">-</h3>
                    <p>Total Utilisateurs</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">🔒</div>
                <div class="stat-info">
                    <h3 id="admin-count">-</h3>
                    <p>Administrateurs</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">👤</div>
                <div class="stat-info">
                    <h3 id="user-count">-</h3>
                    <p>Utilisateurs</p>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">📅</div>
                <div class="stat-info">
                    <h3 id="recent-count">-</h3>
                    <p>Nouveaux (7j)</p>
                </div>
            </div>
        </div>

        <!-- Filtres et recherche -->
        <div class="filters-section">
            <div class="search-bar">
                <input type="text" id="search-input" placeholder="🔍 Rechercher par email, nom..." />
            </div>
            <div class="filter-tabs">
                <button class="filter-tab active" data-filter="all">Tous</button>
                <button class="filter-tab" data-filter="admin">Admins</button>
                <button class="filter-tab" data-filter="user">Utilisateurs</button>
                <button class="filter-tab" data-filter="recent">Récents</button>
            </div>
        </div>

        <!-- Loading spinner -->
        <div id="loading" class="loading">
            <div class="spinner"></div>
            <p>Chargement des utilisateurs...</p>
        </div>

        <!-- Table des utilisateurs -->
        <div class="users-table-container" id="users-container" style="display: none;">
            <table class="users-table">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>👤 Utilisateur</th>
                        <th>📧 Email</th>
                        <th>🔐 Rôle</th>
                        <th>✅ Vérifié</th>
                        <th>📅 Créé le</th>
                        <th>⚙️ Actions</th>
                    </tr>
                </thead>
                <tbody id="users-tbody">
                    <!-- Les utilisateurs seront chargés ici -->
                </tbody>
            </table>
        </div>

        <!-- Message si aucun utilisateur -->
        <div id="no-users" class="no-users" style="display: none;">
            <div class="empty-state">
                <div class="empty-icon">👥</div>
                <h3>Aucun utilisateur trouvé</h3>
                <p>Aucun utilisateur ne correspond à vos critères de recherche.</p>
            </div>
        </div>
    </div>

    <!-- Modal de création d'utilisateur -->
    <div id="create-user-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>➕ Créer un Utilisateur</h2>
                <button class="close-modal" id="close-create-modal">&times;</button>
            </div>
            <form id="create-user-form">
                <div class="form-group">
                    <label for="new-email">📧 Email</label>
                    <input type="email" id="new-email" required />
                </div>
                <div class="form-group">
                    <label for="new-name">👤 Nom</label>
                    <input type="text" id="new-name" required />
                </div>
                <div class="form-group">
                    <label for="new-password">🔒 Mot de passe</label>
                    <input type="password" id="new-password" required minlength="8" />
                </div>
                <div class="form-group">
                    <label for="new-role">🔐 Rôle</label>
                    <select id="new-role" required>
                        <option value="user">👤 Utilisateur</option>
                        <option value="admin">👨‍💼 Administrateur</option>
                    </select>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-secondary" id="cancel-create">Annuler</button>
                    <button type="submit" class="btn-primary">Créer</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal d'édition d'utilisateur -->
    <div id="edit-user-modal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h2>✏️ Modifier Utilisateur</h2>
                <button class="close-modal" id="close-edit-modal">&times;</button>
            </div>
            <form id="edit-user-form">
                <input type="hidden" id="edit-user-id" />
                <div class="form-group">
                    <label for="edit-email">📧 Email</label>
                    <input type="email" id="edit-email" required />
                </div>
                <div class="form-group">
                    <label for="edit-name">👤 Nom</label>
                    <input type="text" id="edit-name" required />
                </div>
                <div class="form-group">
                    <label for="edit-role">🔐 Rôle</label>
                    <select id="edit-role" required>
                        <option value="user">👤 Utilisateur</option>
                        <option value="admin">👨‍💼 Administrateur</option>
                    </select>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-secondary" id="cancel-edit">Annuler</button>
                    <button type="submit" class="btn-primary">Sauvegarder</button>
                </div>
            </form>
        </div>
    </div>
</Layout>

<style>
    .admin-container {
        max-width: 1400px;
        margin: 0 auto;
        padding: 20px;
    }

    .admin-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 30px;
        flex-wrap: wrap;
        gap: 15px;
    }

    .admin-header h1 {
        color: #1f2937;
        margin: 0;
        font-size: 2rem;
    }

    .admin-nav {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .nav-btn, .btn-primary, .btn-secondary, .btn-success, .btn-danger {
        padding: 10px 20px;
        border: none;
        border-radius: 8px;
        text-decoration: none;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        font-size: 14px;
    }

    .nav-btn {
        background: #6b7280;
        color: white;
    }

    .btn-primary {
        background: #3b82f6;
        color: white;
    }

    .btn-secondary {
        background: #e5e7eb;
        color: #374151;
    }

    .btn-success {
        background: #10b981;
        color: white;
    }

    .btn-danger {
        background: #ef4444;
        color: white;
    }

    .nav-btn:hover, .btn-primary:hover, .btn-secondary:hover, .btn-success:hover, .btn-danger:hover {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    /* Stats Grid */
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }

    .stat-card {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        gap: 15px;
        border-left: 4px solid #3b82f6;
    }

    .stat-icon {
        font-size: 2rem;
        width: 60px;
        height: 60px;
        display: flex;
        align-items: center;
        justify-content: center;
        background: #f3f4f6;
        border-radius: 50%;
    }

    .stat-info h3 {
        margin: 0;
        font-size: 1.8rem;
        color: #1f2937;
    }

    .stat-info p {
        margin: 5px 0 0 0;
        color: #6b7280;
        font-size: 0.9rem;
    }

    /* Filtres */
    .filters-section {
        background: white;
        padding: 20px;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        margin-bottom: 20px;
    }

    .search-bar input {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 16px;
        margin-bottom: 15px;
    }

    .search-bar input:focus {
        outline: none;
        border-color: #3b82f6;
    }

    .filter-tabs {
        display: flex;
        gap: 10px;
        flex-wrap: wrap;
    }

    .filter-tab {
        padding: 8px 16px;
        background: #f3f4f6;
        border: none;
        border-radius: 20px;
        cursor: pointer;
        transition: all 0.2s;
        font-weight: 500;
    }

    .filter-tab.active {
        background: #3b82f6;
        color: white;
    }

    /* Loading */
    .loading {
        text-align: center;
        padding: 40px;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f4f6;
        border-left: 4px solid #3b82f6;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin: 0 auto 20px;
    }

    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Table */
    .users-table-container {
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        overflow: hidden;
    }

    .users-table {
        width: 100%;
        border-collapse: collapse;
    }

    .users-table th {
        background: #f8fafc;
        padding: 15px;
        text-align: left;
        font-weight: 600;
        color: #374151;
        border-bottom: 2px solid #e5e7eb;
    }

    .users-table td {
        padding: 15px;
        border-bottom: 1px solid #f3f4f6;
        vertical-align: middle;
    }

    .users-table tr:hover {
        background: #f8fafc;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background: #3b82f6;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-weight: bold;
        font-size: 16px;
    }

    .role-badge {
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 12px;
        font-weight: 600;
        text-transform: uppercase;
    }

    .role-admin {
        background: #fef3c7;
        color: #d97706;
    }

    .role-user {
        background: #e0f2fe;
        color: #0277bd;
    }

    .verified-badge {
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 12px;
        font-weight: 600;
    }

    .verified-yes {
        background: #d1fae5;
        color: #047857;
    }

    .verified-no {
        background: #fef2f2;
        color: #dc2626;
    }

    .action-buttons {
        display: flex;
        gap: 8px;
    }

    .btn-small {
        padding: 6px 12px;
        font-size: 12px;
        border-radius: 6px;
    }

    /* Modal */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.5);
        animation: fadeIn 0.3s;
    }

    .modal-content {
        background-color: white;
        margin: 5% auto;
        padding: 0;
        border-radius: 12px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 10px 25px rgba(0,0,0,0.3);
        animation: slideIn 0.3s;
    }

    .modal-header {
        padding: 20px;
        border-bottom: 1px solid #e5e7eb;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .modal-header h2 {
        margin: 0;
        color: #1f2937;
    }

    .close-modal {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #6b7280;
    }

    .modal form {
        padding: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 600;
        color: #374151;
    }

    .form-group input, .form-group select {
        width: 100%;
        padding: 12px;
        border: 2px solid #e5e7eb;
        border-radius: 8px;
        font-size: 16px;
        box-sizing: border-box;
    }

    .form-group input:focus, .form-group select:focus {
        outline: none;
        border-color: #3b82f6;
    }

    .modal-actions {
        display: flex;
        justify-content: flex-end;
        gap: 10px;
        margin-top: 20px;
    }

    .no-users {
        text-align: center;
        padding: 60px 20px;
        background: white;
        border-radius: 12px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }

    .empty-state .empty-icon {
        font-size: 4rem;
        margin-bottom: 20px;
    }

    .empty-state h3 {
        color: #374151;
        margin-bottom: 10px;
    }

    .empty-state p {
        color: #6b7280;
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    @keyframes slideIn {
        from { transform: translateY(-50px); opacity: 0; }
        to { transform: translateY(0); opacity: 1; }
    }

    /* Responsive */
    @media (max-width: 768px) {
        .admin-container {
            padding: 15px;
        }

        .admin-header {
            flex-direction: column;
            align-items: stretch;
        }

        .admin-nav {
            justify-content: center;
        }

        .stats-grid {
            grid-template-columns: 1fr;
        }

        .users-table-container {
            overflow-x: auto;
        }

        .users-table {
            min-width: 800px;
        }

        .modal-content {
            margin: 10% auto;
            width: 95%;
        }

        .filter-tabs {
            justify-content: center;
        }

        .action-buttons {
            flex-direction: column;
        }
    }

    @media (max-width: 480px) {
        .admin-header h1 {
            font-size: 1.5rem;
        }

        .stat-card {
            flex-direction: column;
            text-align: center;
        }

        .nav-btn, .btn-primary, .btn-secondary, .btn-success, .btn-danger {
            padding: 8px 16px;
            font-size: 13px;
        }
    }
</style>

<script>
    let allUsers = [];
    let currentFilter = 'all';

    // Charger les données au chargement de la page
    document.addEventListener('DOMContentLoaded', function() {
        loadUsers();
        loadStats();
        setupEventListeners();
    });

    function setupEventListeners() {
        // Bouton actualiser
        document.getElementById('refresh-btn').addEventListener('click', function() {
            loadUsers();
            loadStats();
        });

        // Recherche
        document.getElementById('search-input').addEventListener('input', filterUsers);

        // Filtres
        document.querySelectorAll('.filter-tab').forEach(tab => {
            tab.addEventListener('click', function() {
                document.querySelectorAll('.filter-tab').forEach(t => t.classList.remove('active'));
                this.classList.add('active');
                currentFilter = this.dataset.filter;
                filterUsers();
            });
        });

        // Modal création
        document.getElementById('create-user-btn').addEventListener('click', function() {
            document.getElementById('create-user-modal').style.display = 'block';
        });

        document.getElementById('close-create-modal').addEventListener('click', function() {
            document.getElementById('create-user-modal').style.display = 'none';
        });

        document.getElementById('cancel-create').addEventListener('click', function() {
            document.getElementById('create-user-modal').style.display = 'none';
        });

        // Modal édition
        document.getElementById('close-edit-modal').addEventListener('click', function() {
            document.getElementById('edit-user-modal').style.display = 'none';
        });

        document.getElementById('cancel-edit').addEventListener('click', function() {
            document.getElementById('edit-user-modal').style.display = 'none';
        });

        // Formulaires
        document.getElementById('create-user-form').addEventListener('submit', createUser);
        document.getElementById('edit-user-form').addEventListener('submit', updateUser);

        // Fermer modal en cliquant à l'extérieur
        window.addEventListener('click', function(event) {
            const createModal = document.getElementById('create-user-modal');
            const editModal = document.getElementById('edit-user-modal');
            
            if (event.target === createModal) {
                createModal.style.display = 'none';
            }
            if (event.target === editModal) {
                editModal.style.display = 'none';
            }
        });
    }

    async function loadUsers() {
        showLoading(true);
        
        try {
            const response = await fetch('/api/admin/users');
            if (response.ok) {
                const data = await response.json();
                allUsers = data.users || [];
                displayUsers(allUsers);
            } else {
                throw new Error('Erreur de chargement');
            }
        } catch (error) {
            console.error('Erreur:', error);
            showError('Erreur lors du chargement des utilisateurs');
        }
        
        showLoading(false);
    }

    async function loadStats() {
        try {
            const response = await fetch('/api/admin/stats');
            if (response.ok) {
                const data = await response.json();
                updateStats(data);
            }
        } catch (error) {
            console.error('Erreur stats:', error);
        }
    }

    function updateStats(data) {
        document.getElementById('total-users').textContent = data.totalUsers || 0;
        document.getElementById('admin-count').textContent = data.admins || 0;
        document.getElementById('user-count').textContent = data.users || 0;
        document.getElementById('recent-count').textContent = data.recentUsers || 0;
    }

    function displayUsers(users) {
        const tbody = document.getElementById('users-tbody');
        const container = document.getElementById('users-container');
        const noUsers = document.getElementById('no-users');

        if (users.length === 0) {
            container.style.display = 'none';
            noUsers.style.display = 'block';
            return;
        }

        container.style.display = 'block';
        noUsers.style.display = 'none';

        tbody.innerHTML = users.map(user => `
            <tr data-user-id="${user.id}">
                <td><code>${user.id.substring(0, 8)}...</code></td>
                <td>
                    <div class="user-info">
                        <div class="user-avatar">${(user.name || user.email).charAt(0).toUpperCase()}</div>
                        <div>
                            <div style="font-weight: 600;">${user.name || 'Sans nom'}</div>
                        </div>
                    </div>
                </td>
                <td>${user.email}</td>
                <td>
                    <span class="role-badge role-${user.role}">
                        ${user.role === 'admin' ? '👨‍💼 Admin' : '👤 User'}
                    </span>
                </td>
                <td>
                    <span class="verified-badge ${user.emailVerified ? 'verified-yes' : 'verified-no'}">
                        ${user.emailVerified ? '✅ Oui' : '❌ Non'}
                    </span>
                </td>
                <td>${formatDate(user.createdAt)}</td>
                <td>
                    <div class="action-buttons">
                        <button class="btn-primary btn-small" onclick="editUser('${user.id}')">✏️ Modifier</button>
                        <button class="btn-danger btn-small" onclick="deleteUser('${user.id}', '${user.email}')">🗑️ Supprimer</button>
                    </div>
                </td>
            </tr>
        `).join('');
    }

    function filterUsers() {
        const searchTerm = document.getElementById('search-input').value.toLowerCase();
        
        let filtered = allUsers.filter(user => {
            const matchesSearch = user.email.toLowerCase().includes(searchTerm) || 
                                (user.name && user.name.toLowerCase().includes(searchTerm));
            
            let matchesFilter = true;
            switch(currentFilter) {
                case 'admin':
                    matchesFilter = user.role === 'admin';
                    break;
                case 'user':
                    matchesFilter = user.role === 'user';
                    break;
                case 'recent':
                    const weekAgo = new Date();
                    weekAgo.setDate(weekAgo.getDate() - 7);
                    matchesFilter = new Date(user.createdAt) > weekAgo;
                    break;
            }
            
            return matchesSearch && matchesFilter;
        });
        
        displayUsers(filtered);
    }

    function showLoading(show) {
        document.getElementById('loading').style.display = show ? 'block' : 'none';
        document.getElementById('users-container').style.display = show ? 'none' : 'block';
    }

    function showError(message) {
        alert('❌ ' + message);
    }

    function formatDate(dateString) {
        const date = new Date(dateString);
        return date.toLocaleDateString('fr-FR', {
            day: '2-digit',
            month: '2-digit',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }

    async function createUser(event) {
        event.preventDefault();
        
        const email = document.getElementById('new-email').value;
        const name = document.getElementById('new-name').value;
        const password = document.getElementById('new-password').value;
        const role = document.getElementById('new-role').value;

        try {
            // Ici vous ajouteriez l'API de création
            alert('🚧 Fonction de création en développement');
            
            // Fermer le modal et recharger
            document.getElementById('create-user-modal').style.display = 'none';
            document.getElementById('create-user-form').reset();
            loadUsers();
            loadStats();
        } catch (error) {
            showError('Erreur lors de la création: ' + error.message);
        }
    }

    async function updateUser(event) {
        event.preventDefault();
        
        const id = document.getElementById('edit-user-id').value;
        const email = document.getElementById('edit-email').value;
        const name = document.getElementById('edit-name').value;
        const role = document.getElementById('edit-role').value;

        try {
            // Ici vous ajouteriez l'API de mise à jour
            alert('🚧 Fonction de modification en développement');
            
            // Fermer le modal et recharger
            document.getElementById('edit-user-modal').style.display = 'none';
            loadUsers();
            loadStats();
        } catch (error) {
            showError('Erreur lors de la modification: ' + error.message);
        }
    }

    function editUser(userId) {
        const user = allUsers.find(u => u.id === userId);
        if (!user) return;

        document.getElementById('edit-user-id').value = user.id;
        document.getElementById('edit-email').value = user.email;
        document.getElementById('edit-name').value = user.name || '';
        document.getElementById('edit-role').value = user.role;
        
        document.getElementById('edit-user-modal').style.display = 'block';
    }

    function deleteUser(userId, email) {
        if (confirm(`⚠️ Êtes-vous sûr de vouloir supprimer l'utilisateur ${email} ?\n\nCette action est irréversible.`)) {
            // Ici vous ajouteriez l'API de suppression
            alert('🚧 Fonction de suppression en développement');
            // loadUsers(); // Recharger après suppression
        }
    }
</script>
