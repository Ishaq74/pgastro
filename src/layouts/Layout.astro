---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="fr">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
		<header class="main-header">
			<nav class="nav-container">
				<div class="nav-brand">
					<a href="/">üöÄ RealAstro</a>
				</div>
				
				<div class="nav-menu" id="nav-menu">
					<div class="nav-links">
						<a href="/" class="nav-link">Accueil</a>
						
						<div id="auth-links" class="auth-links">
							<!-- Links dynamiques selon l'√©tat d'auth -->
						</div>
					</div>
				</div>
				
				<div class="nav-toggle" id="nav-toggle">
					<span></span>
					<span></span>
					<span></span>
				</div>
			</nav>
		</header>
		
		<main class="main-content">
			<slot />
		</main>
		
		<script>
			import { authClient } from '../lib/auth-client';
			
			// Navigation mobile toggle
			document.addEventListener('DOMContentLoaded', () => {
				const navToggle = document.getElementById('nav-toggle');
				const navMenu = document.getElementById('nav-menu');
				
				navToggle?.addEventListener('click', () => {
					navMenu?.classList.toggle('active');
				});
				
				// Fermer le menu sur click d'un lien
				document.querySelectorAll('.nav-link').forEach(link => {
					link.addEventListener('click', () => {
						navMenu?.classList.remove('active');
					});
				});
				
				loadAuthLinks();
			});
			
			async function loadAuthLinks() {
				try {
					const session = await authClient.getSession();
					const authLinksContainer = document.getElementById('auth-links');
					
					if (!authLinksContainer) return;
					
					if (session?.user) {
						const userRole = session.user.role || 'user';
						authLinksContainer.innerHTML = `
							<a href="/profile" class="nav-link">üë§ Profil</a>
							<a href="/dashboard" class="nav-link">üè† Dashboard</a>
							${userRole === 'admin' ? '<a href="/admin" class="nav-link">üõ°Ô∏è Admin</a>' : ''}
							<button id="logout-btn" class="nav-link logout-btn">üö™ D√©connexion</button>
						`;
						
						// Event logout
						document.getElementById('logout-btn')?.addEventListener('click', async () => {
							try {
								await authClient.signOut();
								window.location.href = '/';
							} catch (error) {
								console.error('Erreur d√©connexion:', error);
							}
						});
					} else {
						authLinksContainer.innerHTML = `
							<a href="/login" class="nav-link">üîë Connexion</a>
							<a href="/register" class="nav-link">üìù Inscription</a>
						`;
					}
				} catch (error) {
					console.error('Erreur chargement auth:', error);
					// Fallback si erreur
					const authLinksContainer = document.getElementById('auth-links');
					if (authLinksContainer) {
						authLinksContainer.innerHTML = `
							<a href="/login" class="nav-link">üîë Connexion</a>
							<a href="/register" class="nav-link">üìù Inscription</a>
						`;
					}
				}
			}
		</script>
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		padding: 0;
		width: 100%;
		height: 100%;
		font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
		background: #f8f9fa;
	}
	
	/* Header Styles */
	.main-header {
		background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
		box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
		position: sticky;
		top: 0;
		z-index: 1000;
	}
	
	.nav-container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 1rem;
		display: flex;
		justify-content: space-between;
		align-items: center;
		height: 60px;
	}
	
	.nav-brand a {
		color: white;
		text-decoration: none;
		font-size: 1.5rem;
		font-weight: bold;
		transition: opacity 0.3s;
	}
	
	.nav-brand a:hover {
		opacity: 0.8;
	}
	
	.nav-menu {
		display: flex;
		align-items: center;
	}
	
	.nav-links {
		display: flex;
		align-items: center;
		gap: 1.5rem;
	}
	
	.auth-links {
		display: flex;
		align-items: center;
		gap: 1rem;
	}
	
	.nav-link {
		color: white;
		text-decoration: none;
		padding: 0.5rem 1rem;
		border-radius: 6px;
		transition: background-color 0.3s, transform 0.2s;
		font-size: 0.95rem;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}
	
	.nav-link:hover {
		background-color: rgba(255, 255, 255, 0.1);
		transform: translateY(-1px);
	}
	
	.logout-btn {
		background: transparent;
		border: none;
		cursor: pointer;
		font-size: 0.95rem;
	}
	
	.logout-btn:hover {
		background-color: rgba(255, 255, 255, 0.1);
	}
	
	/* Mobile Toggle */
	.nav-toggle {
		display: none;
		flex-direction: column;
		cursor: pointer;
		padding: 0.5rem;
	}
	
	.nav-toggle span {
		width: 25px;
		height: 3px;
		background: white;
		margin: 3px 0;
		transition: 0.3s;
		border-radius: 2px;
	}
	
	.main-content {
		min-height: calc(100vh - 60px);
	}
	
	/* Responsive Design */
	@media (max-width: 768px) {
		.nav-toggle {
			display: flex;
		}
		
		.nav-menu {
			position: fixed;
			top: 60px;
			left: -100%;
			width: 100%;
			height: calc(100vh - 60px);
			background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
			flex-direction: column;
			justify-content: flex-start;
			padding-top: 2rem;
			transition: left 0.3s;
		}
		
		.nav-menu.active {
			left: 0;
		}
		
		.nav-links {
			flex-direction: column;
			gap: 1rem;
			width: 100%;
			padding: 0 2rem;
		}
		
		.auth-links {
			flex-direction: column;
			gap: 1rem;
			width: 100%;
		}
		
		.nav-link {
			width: 100%;
			text-align: center;
			padding: 1rem;
			font-size: 1.1rem;
		}
		
		/* Animation du toggle */
		.nav-menu.active ~ .nav-toggle span:nth-child(1) {
			transform: rotate(-45deg) translate(-5px, 6px);
		}
		
		.nav-menu.active ~ .nav-toggle span:nth-child(2) {
			opacity: 0;
		}
		
		.nav-menu.active ~ .nav-toggle span:nth-child(3) {
			transform: rotate(45deg) translate(-5px, -6px);
		}
	}
	
	@media (max-width: 480px) {
		.nav-container {
			padding: 0 0.5rem;
		}
		
		.nav-brand a {
			font-size: 1.3rem;
		}
		
		.nav-links {
			padding: 0 1rem;
		}
	}
</style>
